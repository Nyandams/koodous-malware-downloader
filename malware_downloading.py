from crawl_detected import retrieve_detected_apk
from tqdm import tqdm
import urllib.request
import os
import requests
from dotenv import load_dotenv
import sys

load_dotenv()
curpath = os.path.abspath(os.curdir)
koodous_token = os.getenv('KOODOUS_TOKEN')

class TqdmUpTo(tqdm):
    """Provides `update_to(n)` which uses `tqdm.update(delta_n)`."""

    def update_to(self, b=1, bsize=1, tsize=None):
        """
        b  : int, optional
            Number of blocks transferred so far [default: 1].
        bsize  : int, optional
            Size of each block (in tqdm units) [default: 1].
        tsize  : int, optional
            Total size (in tqdm units). If [default: None] remains unchanged.
        """
        if tsize is not None:
            self.total = tsize
        self.update(b * bsize - self.n)


def download_koodous_malwares(nb_apk):
    if koodous_token:
        retrieved_apk = retrieve_detected_apk(nb_apk_min=nb_apk)

        dir_name = "apk/"
        if not os.path.exists(dir_name):
            os.mkdir(dir_name)
            print("Directory ", dir_name, " Created ")

        for i in range(nb_apk):
            apk = retrieved_apk[i]
            url_download = "https://api.koodous.com/apks/{}/download".format(apk.sha256)

            r = requests.get(url=url_download, headers={'Authorization': 'Token {}'.format(koodous_token)})

            if r.status_code is 200:
                download_url = r.json().get('download_url')

                with TqdmUpTo(unit='B', unit_scale=True, miniters=1, ncols=100,
                              desc='downloading {}'.format(apk.app)) as t:  # all optional kwargs
                    urllib.request.urlretrieve(download_url, filename="{}/{}.apk".format(dir_name, apk.app),
                                               reporthook=t.update_to, data=None)
            else:
                print('Koodous daily download limit reached')
                break
    else:
        print('Koodous token missing')



try:
    nb_download = int(sys.argv[1])
    print('Searching and Downloading {} files'.format(nb_download))
    download_koodous_malwares(nb_download)
except ValueError:
    print("First parameter (number of apk) should be an int!")
